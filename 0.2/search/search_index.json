{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Simple TOML Configurator","text":"<p>The Simple TOML Configurator is a versatile Python library designed to streamline the handling and organization of configuration settings across various types of applications. This library facilitates the management of configuration values through a user-friendly interface and stores these settings in TOML file format for easy readability and accessibility.</p>"},{"location":"#features","title":"Features","text":"<ol> <li> <p>Effortless Configuration Management: The heart of the library is the <code>Configuration</code> class, which simplifies the management of configuration settings. It provides intuitive methods to load, update, and store configurations, ensuring a smooth experience for developers.</p> </li> <li> <p>Universal Applicability: The Simple TOML Configurator is designed to work seamlessly with any type of Python application, ranging from web frameworks like Flask, Django, and FastAPI to standalone scripts and command-line utilities.</p> </li> <li> <p>TOML File Storage: Configuration settings are stored in TOML files, a popular human-readable format. This enables developers to review, modify, and track configuration changes easily.</p> </li> <li> <p>Attribute-Based Access: Accessing configuration values is straightforward, thanks to the attribute-based approach. Settings can be accessed and updated as attributes, making it convenient for both reading and modifying values.</p> </li> <li> <p>Updating Configurations: The library enables the updating of configuration settings from a dictionary, ensuring that the changes are accurately reflected both in-memory and in the stored TOML file.</p> </li> <li> <p>Default Values: Developers can define default values for various configuration sections and keys. The library automatically incorporates new values and manages the removal of outdated ones.</p> </li> <li> <p>Customization Capabilities: The <code>Configuration</code> class can be extended and customized to cater to application-specific requirements. Developers can implement custom logic with getters and setters to handle unique settings or scenarios.</p> </li> </ol>"},{"location":"#usage-example","title":"Usage Example","text":"<pre><code>from simple_toml_configurator import Configuration\n# Define default configuration values\ndefault_config = {\n\"app\": {\n\"ip\": \"0.0.0.0\",\n\"host\": \"\",\n\"port\": 5000,\n\"upload_folder\": \"uploads\"\n}\n\"mysql\": {\n\"user\": \"root\",\n\"password\": \"root\"\n\"databases\": {\n\"prod\": \"db1\",\n\"dev\": \"db2\"\n}\n}\n}\n# Initialize the Simple TOML Configurator\nsettings = Configuration()\nsettings.init_config(\"config\", default_config, \"app_config\")\n# Stores an app_config.toml file in the `config` folder at the current working directory.\n# Access and update configuration values\nprint(settings.app_ip)  # Output: '0.0.0.0'\nsettings.update_config({\"app_ip\": \"1.2.3.4\"})\nprint(settings.app_ip)  # Output: '1.2.3.4'\n# Access all settings as a dictionary\nall_settings = settings.get_settings()\nprint(all_settings)\n# Output: {'app_ip': '1.2.3.4', 'app_host': '', 'app_port': 5000, 'app_upload_folder': 'uploads'}\n# Modify values directly in the config dictionary\nsettings.config[\"mysql\"][\"databases\"][\"prod\"] = \"db3\"\nsettings.update()\nprint(settings.mysql_databases[\"prod\"])  # Output: 'db3'\n</code></pre> <p>The Simple TOML Configurator empowers developers to efficiently manage configuration settings across a wide range of Python applications. Whether you're building a web application, a command-line tool, or a standalone script, this library provides the tools you need to maintain and access configuration values with ease and clarity.</p>"},{"location":"configurator/","title":"Simple TOML Configurator Docs","text":"<p>selection:     members: update</p>"},{"location":"configurator/#src.simple_tomlconfigurator.toml_configurator.Configuration","title":"<code>Configuration</code>","text":"<p>Class to set our configuration values we can use around in our app. The configuration is stored in a toml file as well as on the instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; default_config = {\n    \"app\": {\n        \"ip\": \"0.0.0.0\",\n        \"host\": \"\",\n        \"port\": 5000,\n        \"upload_folder\": \"uploads\"\n        }\n    }\n&gt;&gt;&gt; from simple_toml_configurator import Configuration\n&gt;&gt;&gt; settings = Configuration()\n&gt;&gt;&gt; settings.init_config(\"config\", default_config, \"app_config\"))\n{'app': {'ip': '0.0.0.0', 'host': '', 'port': 5000, 'upload_folder': 'uploads'}}\n&gt;&gt;&gt; settings.get_settings()\n{'app_ip': '0.0.0.0', 'app_host': '', 'app_port': 5000, 'app_upload_folder': 'uploads'}\n&gt;&gt;&gt; settings.update_config({\"app_ip\":\"1.2.3.4\"})\n&gt;&gt;&gt; settings.app_ip\n'1.2.3.4'\n&gt;&gt;&gt; settings.config.get(\"app\").get(\"ip\")\n'1.2.3.4'\n# Update the config dict directly\n&gt;&gt;&gt; settings.config[\"app\"][\"ip\"] = \"0.0.0.0\"\n&gt;&gt;&gt; settings.update()\n&gt;&gt;&gt; settings.app_ip\n'0.0.0.0'\n</code></pre> <p>Attributes:</p> Name Type Description <code>config</code> <code>TOMLDocument</code> <p>TOMLDocument with all config values</p> <code>config_path</code> <code>str | Path</code> <p>Path to config folder</p> <code>config_file_name</code> <code>str</code> <p>Name of the config file</p> <code>defaults</code> <code>dict[str, dict]</code> <p>Dictionary with all default values for your application</p> <p>Info</p> <p>Changing a table name in your <code>defaults</code> will remove the old table in config including all keys and values.</p> <p>Note</p> <p>If updating an attribute needs extra logic, make a custom class that inherits from this class and add property attributes with a getter and setter.</p> <p>Example:</p> <pre><code>from simple_toml_configurator import Configuration\nfrom utils import configure_logging\nclass CustomConfiguration(Configuration):\ndef __init__(self):\nsuper().__init__()\n@property\ndef logging_debug(self):\nreturn getattr(self, \"_logging_debug\")\n@logging_debug.setter\ndef logging_debug(self, value: bool):\nif not isinstance(value, bool):\nraise ValueError(f\"value must be of type bool not {type(value)}\")\nself._logging_debug = value\nlog_level = \"DEBUG\" if value else \"INFO\"\nconfigure_logging(log_level)\nlogger.debug(f\"Debug logging set to {value}\")\ndefaults = {\n\"logging\": {\n\"debug\": False\n...\n}\nconfig_path = os.environ.get(\"CONFIG_PATH\", \"config\")\nsettings = CustomConfiguration()\nsettings.init_config(config_path, defaults, \"app_config\"))\n</code></pre> Source code in <code>src\\simple_tomlconfigurator\\toml_configurator.py</code> <pre><code>class Configuration:\n\"\"\"Class to set our configuration values we can use around in our app.\n    The configuration is stored in a toml file as well as on the instance.\n    Examples:\n        ```pycon\n        &gt;&gt;&gt; default_config = {\n            \"app\": {\n                \"ip\": \"0.0.0.0\",\n                \"host\": \"\",\n                \"port\": 5000,\n                \"upload_folder\": \"uploads\"\n                }\n            }\n        &gt;&gt;&gt; from simple_toml_configurator import Configuration\n        &gt;&gt;&gt; settings = Configuration()\n        &gt;&gt;&gt; settings.init_config(\"config\", default_config, \"app_config\"))\n        {'app': {'ip': '0.0.0.0', 'host': '', 'port': 5000, 'upload_folder': 'uploads'}}\n        &gt;&gt;&gt; settings.get_settings()\n        {'app_ip': '0.0.0.0', 'app_host': '', 'app_port': 5000, 'app_upload_folder': 'uploads'}\n        &gt;&gt;&gt; settings.update_config({\"app_ip\":\"1.2.3.4\"})\n        &gt;&gt;&gt; settings.app_ip\n        '1.2.3.4'\n        &gt;&gt;&gt; settings.config.get(\"app\").get(\"ip\")\n        '1.2.3.4'\n        # Update the config dict directly\n        &gt;&gt;&gt; settings.config[\"app\"][\"ip\"] = \"0.0.0.0\"\n        &gt;&gt;&gt; settings.update()\n        &gt;&gt;&gt; settings.app_ip\n        '0.0.0.0'\n        ```\n    Attributes:\n        config (TOMLDocument): TOMLDocument with all config values\n        config_path (str|Path): Path to config folder\n        config_file_name (str): Name of the config file\n        defaults (dict[str,dict]): Dictionary with all default values for your application\n    !!! Info\n        Changing a table name in your `defaults` will remove the old table in config including all keys and values.\n    !!! Note\n        If updating an attribute needs extra logic, make a custom class that inherits from this class and add property attributes with a getter and setter.\n        Example:\n        ```python\n        from simple_toml_configurator import Configuration\n        from utils import configure_logging\n        class CustomConfiguration(Configuration):\n            def __init__(self):\n                super().__init__()\n            @property\n            def logging_debug(self):\n                return getattr(self, \"_logging_debug\")\n            @logging_debug.setter\n            def logging_debug(self, value: bool):\n                if not isinstance(value, bool):\n                    raise ValueError(f\"value must be of type bool not {type(value)}\")\n                self._logging_debug = value\n                log_level = \"DEBUG\" if value else \"INFO\"\n                configure_logging(log_level)\n                logger.debug(f\"Debug logging set to {value}\")\n            defaults = {\n                \"logging\": {\n                    \"debug\": False\n                ...\n                }\n            config_path = os.environ.get(\"CONFIG_PATH\", \"config\")\n            settings = CustomConfiguration()\n            settings.init_config(config_path, defaults, \"app_config\"))\n        ```\n    \"\"\"\ndef __init__(self) -&gt; None:\nself.logger = logging.getLogger(\"Configuration\")\ndef __repr__(self) -&gt; str:\nreturn f\"Configuration(config_path={getattr(self,'config_path', None)}, defaults={getattr(self, 'defaults',None)}, config_file_name={getattr(self, 'config_file_name', None)})\" # pragma: no cover\ndef __str__(self) -&gt; str:\nreturn f\"&lt;Configuration&gt; \\nConfig file name: {getattr(self, 'config_file_name', None)}\\nConfig path: {getattr(self, 'config_path', None)}\" # pragma: no cover\ndef init_config(self, config_path:str|Path, defaults:dict[str,dict], config_file_name:str=\"config\") -&gt; TOMLDocument:\n\"\"\"\n        Creates the config folder and toml file if needed.\n        Upon init it will add any new/missing values/tables from `defaults` into the existing TOML config.\n        Removes any old values/tables from `self.config` that are not in `self.defaults`.\n        Sets all config keys as attributes on the class. e.g. `self.table_key` and `self._table_key =`\n        Examples:\n            ```pycon\n            &gt;&gt;&gt; settings = Configuration()\n            &gt;&gt;&gt; settings.init_config(\"config\", defaults, \"app_config\"))\n            ```\n        Args:\n            config_path (str|Path): Path to config folder\n            defaults (dict[str,dict]): Dictionary with all default values for your application\n            config_file_name (str, optional): Name of the config file. Defaults to \"config\".\n        Returns:\n            dict[str,Any]: Returns a TOMLDocument.\n        \"\"\"\nif not isinstance(config_path, (str, Path)):\nraise TypeError(f\"argument config_path must be of type {type(str)} or {type(Path)}, not: {type(config_path)}\") # pragma: no cover\nif not isinstance(defaults, dict):\nraise TypeError(f\"argument defaults must be of type {type(dict)}, not: {type(defaults)}\") # pragma: no cover\nself.defaults:dict[str,dict] = defaults\nself.config_path:str|Path = config_path\nself.config_file_name:str = f\"{config_file_name}.toml\"\nself._full_config_path:str = os.path.join(self.config_path, self.config_file_name)\nself.config:TOMLDocument = self._load_config()\nself._sync_config_values()\nself._set_attributes()\nreturn self.config\ndef _sync_config_values(self) -&gt; None:\n\"\"\"Add any new/missing values/tables from self.defaults into the existing TOML config\"\"\"\nfor default_table in self.defaults:\nif default_table not in self.config.keys():\nself.logger.info(\"Adding new TOML table: ('%s') to TOML Document\", default_table)\nself.config[default_table] = self.defaults[default_table]\ncontinue\nif default_table in self.config.keys():\nfor default_key, default_value in self.defaults[default_table].items():\nif default_key not in self.config[default_table].keys():\nself.logger.info(\"Adding new Key: ('%s':'***') to Table: ('%s')\", default_key, default_table) # pragma: no cover\nself.config[default_table][default_key] = default_value # pragma: no cover\nself._write_config_to_file()\nself._clear_old_config_values()\ndef _clear_old_config_values(self) -&gt; None:\n\"\"\"Remove any old values/tables from self.config that are not in self.defaults\n        \"\"\"\nfor table in self.config:\nif table not in self.defaults.keys():\nself.config.remove(table) # pragma: no cover\nself._write_config_to_file() # pragma: no cover\nreturn self._clear_old_config_values() # pragma: no cover\nfor key in list(self.config[table].keys()):\nif key not in self.defaults[table]:\nself.config[table].remove(key)\nself._write_config_to_file()\ncontinue\ndef get_settings(self) -&gt; dict[str, Any]:\n\"\"\"Get all config key values as a dictionary.\n        Dict keys are formatted as: `table_key`:\n        Examples:\n            ```pycon\n            &gt;&gt;&gt; defaults = {...}\n            &gt;&gt;&gt; settings = Configuration()\n            &gt;&gt;&gt; settings.init_config(\"config\", defaults, \"app_config\"))\n            &gt;&gt;&gt; settings.get_settings()\n            {'app_ip': '0.0.0.0', 'app_host': '', 'app_port': 5000, 'app_upload_folder': 'uploads'}\n            ```\n        Returns:\n            dict[str, Any]: Dictionary with config key values.\n        \"\"\"\nsettings: dict[str, Any] = {}\nfor table in self.config:\nfor key, value in self.config[table].items():\nsettings[f\"{table}_{key}\"] = value\nreturn settings\ndef _set_attributes(self) -&gt; dict[str, Any]:\n\"\"\"Set all config keys as attributes on the class.\n        Two different attributes are set for each key.\n        _TOMLtable_key: e.g. `_app_host`\n        TOMLtable_key: e.g. `app_host`\n        This makes it so that the instance attributes are updated when the a value in self.config is updated as they reference the same object.\n        Returns:\n            dict[str, Any]: Returns all attributes in a dictionary\n        \"\"\"\nfor table in self.config:\nfor key, value in self.config[table].items():\nsetattr(self, f\"_{table}_{key}\", value)\nsetattr(self, f\"{table}_{key}\", value)\nreturn self.get_settings()\ndef update_config(self, settings: dict[str,Any]) -&gt; None:\n\"\"\"Update all config values from a dictionary, set new attribute values and write the config to file.\n        Use the same format as `self.get_settings()` returns to update the config.\n        Examples:\n        ```pycon\n        &gt;&gt;&gt; settings = Configuration()\n        &gt;&gt;&gt; settings.update_config({\"app_host\": \"test_localhost\", \"app_port\": 8888})\n        ```\n        Args:\n            settings (dict): Dict with key values\n        \"\"\"\nif not isinstance(settings, dict):\nraise TypeError(f\"Argument settings must be of type {type(dict)}, not: {type(settings)}\") # pragma: no cover\ntry:\nfor table in self.config:\nfor key, value in settings.items():\ntable_key = key.split(f\"{table}_\")[-1]\nif self.config.get(table) and table_key in self.config[table].keys():\nif self.config[table][table_key] != value:\nself.logger.info(\"Updating TOML Document -&gt; Table: ('%s') Key: ('%s')\",table, table_key)\nself.config[table][table_key] = value\nexcept Exception as exc: # pragma: no cover\nself.logger.exception(\"Could not update config!\")\nraise TOMLConfigUpdateError(\"unable to update config!\") from exc\nself._write_config_to_file()\ndef update(self):\n\"\"\"Write the current config to file.\n        Examples:\n        ```pycon\n        &gt;&gt;&gt; from simple_toml_configurator import Configuration\n        &gt;&gt;&gt; settings = Configuration()\n        &gt;&gt;&gt; defaults = {\"mysql\": {\"databases\": {\"prod\":\"prod_db1\", \"dev\":\"dev_db1\"}}}\n        &gt;&gt;&gt; settings.init_config(\"config\", defaults, \"app_config\")\n        &gt;&gt;&gt; settings.mysql_databases[\"prod\"]\n        'prod_db1'\n        &gt;&gt;&gt; settings.config[\"mysql\"][\"databases\"][\"prod\"] = \"prod_db2\"\n        &gt;&gt;&gt; settings.update()\n        &gt;&gt;&gt; settings.mysql_databases[\"prod\"]\n        'prod_db2'\n        ```\n        Args:\n            settings (dict): Dict with key values\n        \"\"\"\nself._write_config_to_file()\nself._set_attributes()\ndef _write_config_to_file(self) -&gt; None:\n\"\"\"Update and write the config to file\"\"\"\nself.logger.debug(\"Writing config to file\")\ntry:\nwith Path(self._full_config_path).open(\"w\") as conf:\nconf.write(tomlkit.dumps(self.config))\nexcept (OSError,FileNotFoundError,TypeError) as exc: # pragma: no cover\nself.logger.exception(\"Could not write config file!\")\nraise TOMLWriteConfigError(\"unable to write config file!\") from exc # pragma: no cover\nself.config = self._load_config()\ndef _load_config(self) -&gt; TOMLDocument:\n\"\"\"Load the config from file and return it as a TOMLDocument\"\"\"\ntry:\nreturn tomlkit.loads(Path(self._full_config_path).read_text())\nexcept FileNotFoundError: # pragma: no cover\nself._create_config(self._full_config_path) # Create the config folder and toml file if needed.\ntry:\nreturn tomlkit.loads(Path(self._full_config_path).read_text())\nexcept Exception as exc:\nself.logger.exception(\"Could not load config file!\")\nraise TOMLLoadConfigError(\"unable to load config file!\") from exc\ndef _create_config(self, config_file_path:str) -&gt; None:\n\"\"\"Create the config folder and toml file.\n        Args:\n            config_file_path (str): Path to the config file\n        \"\"\"\n# Check if config path exists\ntry:\nif not os.path.isdir(os.path.dirname(config_file_path)):\nos.makedirs(os.path.dirname(config_file_path), exist_ok=True) # pragma: no cover\nexcept OSError as exc: # pragma: no cover\nself.logger.exception(\"Could not create config folder!\")\nraise  TOMLCreateConfigError(f\"unable to create config folder: ({os.path.dirname(config_file_path)})\") from exc # pragma: no cover\ntry:\nself.logger.debug(\"Creating config\")\nwith Path(config_file_path).open(\"w\") as conf:\nconf.write(tomlkit.dumps(self.defaults))\nexcept OSError as exc: # pragma: no cover\nself.logger.exception(\"Could not create config file!\")\nraise TOMLCreateConfigError(f\"unable to create config file: ({config_file_path})\") from exc\n</code></pre>"},{"location":"configurator/#src.simple_tomlconfigurator.toml_configurator.Configuration.get_settings","title":"<code>get_settings()</code>","text":"<p>Get all config key values as a dictionary.</p> <p>Dict keys are formatted as: <code>table_key</code>:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; defaults = {...}\n&gt;&gt;&gt; settings = Configuration()\n&gt;&gt;&gt; settings.init_config(\"config\", defaults, \"app_config\"))\n&gt;&gt;&gt; settings.get_settings()\n{'app_ip': '0.0.0.0', 'app_host': '', 'app_port': 5000, 'app_upload_folder': 'uploads'}\n</code></pre> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary with config key values.</p> Source code in <code>src\\simple_tomlconfigurator\\toml_configurator.py</code> <pre><code>def get_settings(self) -&gt; dict[str, Any]:\n\"\"\"Get all config key values as a dictionary.\n    Dict keys are formatted as: `table_key`:\n    Examples:\n        ```pycon\n        &gt;&gt;&gt; defaults = {...}\n        &gt;&gt;&gt; settings = Configuration()\n        &gt;&gt;&gt; settings.init_config(\"config\", defaults, \"app_config\"))\n        &gt;&gt;&gt; settings.get_settings()\n        {'app_ip': '0.0.0.0', 'app_host': '', 'app_port': 5000, 'app_upload_folder': 'uploads'}\n        ```\n    Returns:\n        dict[str, Any]: Dictionary with config key values.\n    \"\"\"\nsettings: dict[str, Any] = {}\nfor table in self.config:\nfor key, value in self.config[table].items():\nsettings[f\"{table}_{key}\"] = value\nreturn settings\n</code></pre>"},{"location":"configurator/#src.simple_tomlconfigurator.toml_configurator.Configuration.init_config","title":"<code>init_config(config_path, defaults, config_file_name='config')</code>","text":"<p>Creates the config folder and toml file if needed.</p> <p>Upon init it will add any new/missing values/tables from <code>defaults</code> into the existing TOML config. Removes any old values/tables from <code>self.config</code> that are not in <code>self.defaults</code>.</p> <p>Sets all config keys as attributes on the class. e.g. <code>self.table_key</code> and <code>self._table_key =</code></p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; settings = Configuration()\n&gt;&gt;&gt; settings.init_config(\"config\", defaults, \"app_config\"))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>config_path</code> <code>str | Path</code> <p>Path to config folder</p> required <code>defaults</code> <code>dict[str, dict]</code> <p>Dictionary with all default values for your application</p> required <code>config_file_name</code> <code>str</code> <p>Name of the config file. Defaults to \"config\".</p> <code>'config'</code> <p>Returns:</p> Type Description <code>TOMLDocument</code> <p>dict[str,Any]: Returns a TOMLDocument.</p> Source code in <code>src\\simple_tomlconfigurator\\toml_configurator.py</code> <pre><code>def init_config(self, config_path:str|Path, defaults:dict[str,dict], config_file_name:str=\"config\") -&gt; TOMLDocument:\n\"\"\"\n    Creates the config folder and toml file if needed.\n    Upon init it will add any new/missing values/tables from `defaults` into the existing TOML config.\n    Removes any old values/tables from `self.config` that are not in `self.defaults`.\n    Sets all config keys as attributes on the class. e.g. `self.table_key` and `self._table_key =`\n    Examples:\n        ```pycon\n        &gt;&gt;&gt; settings = Configuration()\n        &gt;&gt;&gt; settings.init_config(\"config\", defaults, \"app_config\"))\n        ```\n    Args:\n        config_path (str|Path): Path to config folder\n        defaults (dict[str,dict]): Dictionary with all default values for your application\n        config_file_name (str, optional): Name of the config file. Defaults to \"config\".\n    Returns:\n        dict[str,Any]: Returns a TOMLDocument.\n    \"\"\"\nif not isinstance(config_path, (str, Path)):\nraise TypeError(f\"argument config_path must be of type {type(str)} or {type(Path)}, not: {type(config_path)}\") # pragma: no cover\nif not isinstance(defaults, dict):\nraise TypeError(f\"argument defaults must be of type {type(dict)}, not: {type(defaults)}\") # pragma: no cover\nself.defaults:dict[str,dict] = defaults\nself.config_path:str|Path = config_path\nself.config_file_name:str = f\"{config_file_name}.toml\"\nself._full_config_path:str = os.path.join(self.config_path, self.config_file_name)\nself.config:TOMLDocument = self._load_config()\nself._sync_config_values()\nself._set_attributes()\nreturn self.config\n</code></pre>"},{"location":"configurator/#src.simple_tomlconfigurator.toml_configurator.Configuration.update","title":"<code>update()</code>","text":"<p>Write the current config to file.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from simple_toml_configurator import Configuration\n&gt;&gt;&gt; settings = Configuration()\n&gt;&gt;&gt; defaults = {\"mysql\": {\"databases\": {\"prod\":\"prod_db1\", \"dev\":\"dev_db1\"}}}\n&gt;&gt;&gt; settings.init_config(\"config\", defaults, \"app_config\")\n&gt;&gt;&gt; settings.mysql_databases[\"prod\"]\n'prod_db1'\n&gt;&gt;&gt; settings.config[\"mysql\"][\"databases\"][\"prod\"] = \"prod_db2\"\n&gt;&gt;&gt; settings.update()\n&gt;&gt;&gt; settings.mysql_databases[\"prod\"]\n'prod_db2'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>dict</code> <p>Dict with key values</p> required Source code in <code>src\\simple_tomlconfigurator\\toml_configurator.py</code> <pre><code>def update(self):\n\"\"\"Write the current config to file.\n    Examples:\n    ```pycon\n    &gt;&gt;&gt; from simple_toml_configurator import Configuration\n    &gt;&gt;&gt; settings = Configuration()\n    &gt;&gt;&gt; defaults = {\"mysql\": {\"databases\": {\"prod\":\"prod_db1\", \"dev\":\"dev_db1\"}}}\n    &gt;&gt;&gt; settings.init_config(\"config\", defaults, \"app_config\")\n    &gt;&gt;&gt; settings.mysql_databases[\"prod\"]\n    'prod_db1'\n    &gt;&gt;&gt; settings.config[\"mysql\"][\"databases\"][\"prod\"] = \"prod_db2\"\n    &gt;&gt;&gt; settings.update()\n    &gt;&gt;&gt; settings.mysql_databases[\"prod\"]\n    'prod_db2'\n    ```\n    Args:\n        settings (dict): Dict with key values\n    \"\"\"\nself._write_config_to_file()\nself._set_attributes()\n</code></pre>"},{"location":"configurator/#src.simple_tomlconfigurator.toml_configurator.Configuration.update_config","title":"<code>update_config(settings)</code>","text":"<p>Update all config values from a dictionary, set new attribute values and write the config to file. Use the same format as <code>self.get_settings()</code> returns to update the config.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; settings = Configuration()\n&gt;&gt;&gt; settings.update_config({\"app_host\": \"test_localhost\", \"app_port\": 8888})\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>dict</code> <p>Dict with key values</p> required Source code in <code>src\\simple_tomlconfigurator\\toml_configurator.py</code> <pre><code>def update_config(self, settings: dict[str,Any]) -&gt; None:\n\"\"\"Update all config values from a dictionary, set new attribute values and write the config to file.\n    Use the same format as `self.get_settings()` returns to update the config.\n    Examples:\n    ```pycon\n    &gt;&gt;&gt; settings = Configuration()\n    &gt;&gt;&gt; settings.update_config({\"app_host\": \"test_localhost\", \"app_port\": 8888})\n    ```\n    Args:\n        settings (dict): Dict with key values\n    \"\"\"\nif not isinstance(settings, dict):\nraise TypeError(f\"Argument settings must be of type {type(dict)}, not: {type(settings)}\") # pragma: no cover\ntry:\nfor table in self.config:\nfor key, value in settings.items():\ntable_key = key.split(f\"{table}_\")[-1]\nif self.config.get(table) and table_key in self.config[table].keys():\nif self.config[table][table_key] != value:\nself.logger.info(\"Updating TOML Document -&gt; Table: ('%s') Key: ('%s')\",table, table_key)\nself.config[table][table_key] = value\nexcept Exception as exc: # pragma: no cover\nself.logger.exception(\"Could not update config!\")\nraise TOMLConfigUpdateError(\"unable to update config!\") from exc\nself._write_config_to_file()\n</code></pre>"},{"location":"exceptions/","title":"Exceptions","text":""},{"location":"exceptions/#src.simple_tomlconfigurator.exceptions.TOMLConfigFileNotFound","title":"<code>TOMLConfigFileNotFound</code>","text":"<p>             Bases: <code>TOMLConfiguratorException</code></p> <p>Raised when the TOML configuration file is not found.</p> Source code in <code>src\\simple_tomlconfigurator\\exceptions.py</code> <pre><code>class TOMLConfigFileNotFound(TOMLConfiguratorException):\n\"\"\"Raised when the TOML configuration file is not found.\"\"\"\npass\n</code></pre>"},{"location":"exceptions/#src.simple_tomlconfigurator.exceptions.TOMLConfigUpdateError","title":"<code>TOMLConfigUpdateError</code>","text":"<p>             Bases: <code>TOMLConfiguratorException</code></p> <p>Raised when an error occurs while updating the TOML configuration file.</p> Source code in <code>src\\simple_tomlconfigurator\\exceptions.py</code> <pre><code>class TOMLConfigUpdateError(TOMLConfiguratorException):\n\"\"\"Raised when an error occurs while updating the TOML configuration file.\"\"\"\npass\n</code></pre>"},{"location":"exceptions/#src.simple_tomlconfigurator.exceptions.TOMLConfiguratorException","title":"<code>TOMLConfiguratorException</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Base class for all exceptions raised by the TomlConfigurator class.</p> Source code in <code>src\\simple_tomlconfigurator\\exceptions.py</code> <pre><code>class TOMLConfiguratorException(Exception):\n\"\"\"Base class for all exceptions raised by the TomlConfigurator class.\"\"\"\npass\n</code></pre>"},{"location":"exceptions/#src.simple_tomlconfigurator.exceptions.TOMLCreateConfigError","title":"<code>TOMLCreateConfigError</code>","text":"<p>             Bases: <code>TOMLConfiguratorException</code></p> <p>Raised when an error occurs while creating the TOML configuration file.</p> Source code in <code>src\\simple_tomlconfigurator\\exceptions.py</code> <pre><code>class TOMLCreateConfigError(TOMLConfiguratorException):\n\"\"\"Raised when an error occurs while creating the TOML configuration file.\"\"\"\npass\n</code></pre>"},{"location":"exceptions/#src.simple_tomlconfigurator.exceptions.TOMLLoadConfigError","title":"<code>TOMLLoadConfigError</code>","text":"<p>             Bases: <code>TOMLConfiguratorException</code></p> <p>Raised when an error occurs while loading the TOML configuration file.</p> Source code in <code>src\\simple_tomlconfigurator\\exceptions.py</code> <pre><code>class  TOMLLoadConfigError(TOMLConfiguratorException):\n\"\"\"Raised when an error occurs while loading the TOML configuration file.\"\"\"\npass\n</code></pre>"},{"location":"exceptions/#src.simple_tomlconfigurator.exceptions.TOMLWriteConfigError","title":"<code>TOMLWriteConfigError</code>","text":"<p>             Bases: <code>TOMLConfiguratorException</code></p> <p>Raised when an error occurs while writing the TOML configuration file.</p> Source code in <code>src\\simple_tomlconfigurator\\exceptions.py</code> <pre><code>class TOMLWriteConfigError(TOMLConfiguratorException):\n\"\"\"Raised when an error occurs while writing the TOML configuration file.\"\"\"\npass\n</code></pre>"}]}